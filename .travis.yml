language: python
python:
- '3.8'
matrix:
  include:
  - python: '3.7'
    dist: xenial
  - python: '3.8'
    dist: xenial

install:
- sudo find /usr -name '*.pyc' -delete
- sudo apt update
- pip install .
- python setup.py install
- pip install pytest
- pip install coveralls
- pip install pytest-cov

script:
- coverage run --source=./chunkflow chunkflow generate-tasks -c 0 0 0 -s 0 0 0 -g 1 1 1
- coverage run -a --source=./chunkflow chunkflow create-chunk -o seg create-chunk -o gt evaluate-segmentation -s seg -g gt
- coverage run -a --source=./chunkflow chunkflow log-summary -l tests/data/log
- coverage run -a --source=./chunkflow chunkflow create-chunk write-h5 --file-name=/tmp/img.h5 connected-components --threshold 128 write-tif --file-name=/tmp/seg.h5
- if test -f /tmp/img.h5 ; then echo "File found"; else exit 1; fi
- coverage run -a --source=./chunkflow chunkflow read-h5 --file-name=/tmp/img.h5
- coverage run -a --source=./chunkflow chunkflow --dry-run --verbose 1 setup-env -l "gs://my/path" --volume-start 2002 25616 12304 --volume-stop 2068 26128 12816 --max-ram-size 14 --input-patch-size 20 128 128 --output-patch-size 16 96 96 --output-patch-overlap 6 32 32 --channel-num 3 --dtype float32 -m 0 --encoding raw --voxel-size 45 16 16 --max-mip 5
- coverage run -a --source=./chunkflow chunkflow create-chunk --size 36 448 448 inference
  --input-patch-size 20 256 256 --patch-num 2 2 2 --framework identity --batch-size 3 cloud-watch --log-name chunkflow-test
- coverage run -a --source=./chunkflow chunkflow create-chunk --size 36 448 448 inference
  --input-patch-size 20 256 256 --patch-num 2 2 2 --framework "general" --convnet-model "chunkflow/chunk/image/convnet/patch/general_identity.py" --batch-size 3 cloud-watch --log-name chunkflow-test

- pytest --cov-append --cov=./chunkflow ./tests --verbose

after_success:
- coveralls

deploy:
  provider: pypi
  skip_existing: true
  user: "__token__"
  password:
    secure: W20x3KuW8ziG7aAif+CwfDoCyoMMsylsnZka/YxHNfIv6FVcYLbY2Xb9PPqta2KE0oVObi8WI25ff7VGqfS3Rk2EX5IYrFz6KXhTzThtkUxP5r6geDm0X28+OCPlCiDH8xIjUoW92duHA1QQyqsekuClVCRsotT0r1wFBFLUVmHHxe7v5987HdEtc4kjCQtlnIkxlVSpe3taGHp5Ju7X9vGc0hDja7w9xRECsj4NHY39FxWVdwLijvKoulMB80CgCIHNHP9Q/fHJEYgVrvf4g9wL5z2HyoDn0vZuyl61ZwAf2XVFJp5zN+6UIU2csnm4C6Y1YOZyV4j7CcZiT78/zEy7nWOiPZcraPUiuIMZbsoLKCXLrrtdDrpa1rCsA1rcnguXJtNAXu9JqbpPsHEx/Ed8TPvPoCOapvbFTDVkdDEPXctvKciakvjd+x9FyJxP1UcFwDHVTvkFsz3++tezj6oPIczO2k1f+0Zjtz+ShpiMClzItKHwTsuoghgBK8Y7chW5YfE59N5a+XOaYenL1r33s6aaLCnnS4eLEHcZb1pK0JYBlPsScN7t/s0Z2Bgox+90O3NA7c9voyXr8nBdRUbNX+Vw3BWZqCYw5N7CNpnlvAga0Y7UUP2AvfwN01U7wEIYGoyA3ZLwGYr5q2UlR3MwPdUUauZ1IYEEf9d2Xl0=
  on:
    tags: true
    all_branches: true
  distributions: sdist
